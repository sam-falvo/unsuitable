#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass literate-book
\use_default_options true
\begin_modules
noweb
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Index Page Generation
\end_layout

\begin_layout Standard
When the user accesses the blog's base URL, the blog responds with the index
 page.
 This page lets the user see the most recently posted articles.
\end_layout

\begin_layout Standard
All HTTP responses from Unsuitable includes a HTML MIME-type.
\end_layout

\begin_layout Scrap

<<HTML MIME type>>=
\end_layout

\begin_layout Scrap

: mime       ." Content-Type: text/html" cr cr ;
\end_layout

\begin_layout Scrap

@ %def mime
\end_layout

\begin_layout Standard
In the interests of providing a consistent user interface on the various
 pages generated by Unsuitable, we need a method of re-using the beginning
 and trailing part of a web page while still retaining the freedom to change
 the middle content.
 Breaking a page into three parts, a consistent header and footer, and a
 task-oriented content part, solves this problem.
\end_layout

\begin_layout Scrap

<<Index Page Dependencies>>=
\end_layout

\begin_layout Scrap

require lib/templates.fs
\end_layout

\begin_layout Scrap

@
\end_layout

\begin_layout Scrap

<<Index header and footer>>=
\end_layout

\begin_layout Scrap

: footer     S" theme/index-footer" contents ;
\end_layout

\begin_layout Scrap

: header     S" theme/index-header" contents ;
\end_layout

\begin_layout Scrap

@ %def header footer
\end_layout

\begin_layout Standard
If the articles database is empty, clearly we cannot generate any meaningful
 index.
 In this case, we want to deliver instead a diagnostic message letting the
 blog administrator know that everything is OK despite the lack of articles.
 Otherwise, if at least one article exists in the database, then we want
 to make sure we show only the last 
\begin_inset Formula $n$
\end_inset

 articles posted, where 
\begin_inset Formula $1\leq n<maxArticlesOnIndexPage$
\end_inset

.
\end_layout

\begin_layout Scrap

<<Index Page Dependencies>>=
\end_layout

\begin_layout Scrap

require lib/config.fs
\end_layout

\begin_layout Scrap

require lib/article.fs
\end_layout

\begin_layout Scrap

require lib/articles-db.fs
\end_layout

\begin_layout Scrap

require lib/views.fs
\end_layout

\begin_layout Scrap

@
\end_layout

\begin_layout Scrap

<<Index page content>>=
\end_layout

\begin_layout Scrap

: items      begin dup while indexItem 1- repeat drop ;
\end_layout

\begin_layout Scrap

: n          #articles max-articles-on-index-page min ;
\end_layout

\begin_layout Scrap

: -empty     empty? if diagnostic r> drop then ;
\end_layout

\begin_layout Scrap

: content    -empty n items ;
\end_layout

\begin_layout Scrap

@ %def content
\end_layout

\begin_layout Standard
The handler puts everything together into an HTTP response for the web browser,
 then simply exits.
\end_layout

\begin_layout Scrap

<<blog.fs>>=
\end_layout

\begin_layout Scrap

<<Index Page Dependencies>>
\end_layout

\begin_layout Scrap

<<Index page content>>
\end_layout

\begin_layout Scrap

<<Index header and footer>>
\end_layout

\begin_layout Scrap

<<HTML MIME type>>
\end_layout

\begin_layout Scrap

: indexPage  mime header content footer ;
\end_layout

\begin_layout Scrap

indexPage bye
\end_layout

\begin_layout Scrap

@
\end_layout

\begin_layout Chapter

The Many Faces of an Article
\end_layout

\begin_layout Standard
Unsuitable presently defines three different views of an 
\begin_inset Quotes eld
\end_inset

article.
\begin_inset Quotes erd
\end_inset

 Each of these views serve a specific purpose, including:
\end_layout

\begin_layout Itemize
Index view -- a brief summary of an article, showing who wrote it, when,
 the title of the article, and its abstract.
 The reader is expected to click the title of the article if (s)he wishes
 to read more.
\end_layout

\begin_layout Itemize
Article view -- the complete layout of the article, including the body.
\end_layout

\begin_layout Itemize
RSS Item view -- similar to the index view in many ways, but formatted for
 consumption by an RSS reader.
\end_layout

\begin_layout Standard
Each view's implementation follows, and appears in the 
\family typewriter
lib/views.fs
\family default
 file.
\end_layout

\begin_layout Scrap

<<lib/views.fs>>=
\end_layout

\begin_layout Scrap

<<Index View>>
\end_layout

\begin_layout Scrap

<<Article View>>
\end_layout

\begin_layout Scrap

<<RSS Item View>>
\end_layout

\begin_layout Scrap

@
\end_layout

\begin_layout Section
Index View
\end_layout

\begin_layout Standard
Spaces should never appear inside an URL.
 Unsuitable synthesizes URLs to articles, referenced by a numeric identifier,
 as a normal function of rendering links to its articles.
 Since Forth's built-in operator to print an integer appends a space, we
 cannot use it to construct a URL.
 We need a word which prints an integer without the trailing space instead.
\end_layout

\begin_layout Scrap

<<Index View>>=
\end_layout

\begin_layout Scrap

: .-s         s>d <# #s #> type ;
\end_layout

\begin_layout Scrap

@ %def .-s
\end_layout

\begin_layout Standard

Articles can be read by visiting resource at 
\family typewriter
http://
\family default
\shape italic
blog-address
\family typewriter
\shape default
/article/
\family default
\shape italic
id
\shape default
.
\end_layout

\begin_layout Scrap

<<Index View>>=
\end_layout

\begin_layout Scrap

: url         base-blog-http ." /article/" id .-s ;
\end_layout

\begin_layout Scrap

@ %def url
\end_layout

\begin_layout Standard
We need to wrap the article's title inside an anchor tag, so that the reader
 can click on the title to read the full article content.
 Note that standard Forth will not permit us to embed a quotation mark inside
 the string, so we define a convenient word 
\family typewriter
q
\family default
 which emits such a character.
 
\end_layout

\begin_layout Scrap

<<Index View>>=
\end_layout

\begin_layout Scrap

: q           34 emit ;
\end_layout

\begin_layout Scrap

: a(          ." <a href=" q url q ." >" ;
\end_layout

\begin_layout Scrap

: a)          ." </a>" ;
\end_layout

\begin_layout Scrap

@ %def a( a)
\end_layout

\begin_layout Standard
Individual attributes of the article receive their own HTML rendering.
\end_layout

\begin_layout Scrap

<<Index View>>=
\end_layout

\begin_layout Scrap

: .title      a( title type a) ;
\end_layout

\begin_layout Scrap

: .posted     ." 2011 Apr 14 12:35 PDT" ;
\end_layout

\begin_layout Scrap

: .author     author type ;
\end_layout

\begin_layout Scrap

: .abstract   abstract type ;
\end_layout

\begin_layout Scrap

: .continued  hasBody? if ." (continued...)" then ;
\end_layout

\begin_layout Scrap

@ %def .title .posted .author .abstract .continued
\end_layout

\begin_layout Standard

An index item consists of all these things bundled into a single HTML fragment.
\end_layout

\begin_layout Scrap

<<Index View>>=
\end_layout

\begin_layout Scrap

: indexItem   .title .posted .author .abstract .continued ;
\end_layout

\begin_layout Scrap

@ %def indexItem
\end_layout

\begin_layout Section
Article View
\end_layout

\begin_layout Scrap

<<Article View>>=
\end_layout

\begin_layout Scrap

@
\end_layout

\begin_layout Section
RSS Item View
\end_layout

\begin_layout Scrap

<<RSS Item View>>=
\end_layout

\begin_layout Scrap

@
\end_layout

\end_body
\end_document
