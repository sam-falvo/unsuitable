#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass literate-book
\use_default_options true
\begin_modules
noweb
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Part
User's Manual
\end_layout

\begin_layout Chapter
Introduction
\end_layout

\begin_layout Section
Requirements
\end_layout

\begin_layout Standard
Unsuitable 2 requires some things from the host computer on which it's installed.
\end_layout

\begin_layout Itemize
GForth 0.6.2 or later (0.7.0 preferred)
\end_layout

\begin_layout Itemize
Any web server capable of invoking CGI handlers.
 The instructions included here cannot possibly cover all possible web servers
 out there.
 I prefer to use Lighttpd because of its ease of configuration.
 To replicate my set up, you'll want to use Lighttpd 1.4 or later.
\end_layout

\begin_layout Section
Obtaining Unsuitable 2
\end_layout

\begin_layout Standard
Presently, you can obtain Unsuitable 2 most easily using the Mercurial version
 control system.
 The steps listed below should work, formatted for easy cut-and-paste execution
 in any Linux or BSD Bash shell environment.
\end_layout

\begin_layout LyX-Code

\family typewriter
sudo su - 
\family roman
\shape italic
(become root user)
\end_layout

\begin_layout LyX-Code

\family typewriter
mkdir -p /opt/local
\end_layout

\begin_layout LyX-Code

\family typewriter
cd /opt/local
\end_layout

\begin_layout LyX-Code

\family typewriter
hg clone https://bitbucket.org/kc5tja/unsuitable
\end_layout

\begin_layout LyX-Code

\family typewriter
chmod -R a+r unsuitable
\end_layout

\begin_layout LyX-Code

\family typewriter
exit 
\family roman
\shape italic
(become a normal user again)
\end_layout

\begin_layout LyX-Code

\family typewriter
export UNSUITABLE=/opt/local/unsuitable/share/unsuitable2
\end_layout

\begin_layout Section
Configuring your Web Server for Invoking Forth CGI Scripts
\end_layout

\begin_layout Standard
After acquiring a copy of Unsuitable 2, you'll want to configure your web
 server to respond to Forth-based CGI requests.
 If you're using Lighttpd, the following configuration should work:
\end_layout

\begin_layout LyX-Code

\family typewriter
$HTTP["host"] =~ "example
\backslash
.com" {
\end_layout

\begin_layout LyX-Code

\family typewriter
\begin_inset space \qquad{}
\end_inset

server.document-root = "/Files/WWW/example.com/htdocs"
\end_layout

\begin_layout LyX-Code

\family typewriter
\begin_inset space \qquad{}
\end_inset

server.errorlog = "/Files/WWW/example.com/error.log"
\end_layout

\begin_layout LyX-Code

\family typewriter
\begin_inset space \qquad{}
\end_inset

accesslog.filename = "/Files/WWW/example.com/access.log"
\end_layout

\begin_layout LyX-Code

\family typewriter
\begin_inset space \qquad{}
\end_inset

$HTTP["url"] =~ "^/blog" {
\end_layout

\begin_layout LyX-Code

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

cgi.assign = ( ".fs" => "/usr/bin/gforth" )
\end_layout

\begin_layout LyX-Code

\family typewriter
\begin_inset space \qquad{}
\end_inset

}
\end_layout

\begin_layout LyX-Code

\family typewriter
}
\end_layout

\begin_layout Standard
After completing this step, you'll need to create the directories where
 the blog's CGI script will reside.
\end_layout

\begin_layout LyX-Code

\family typewriter
mkdir -p /Files/WWW/example.com/htdocs/blog
\end_layout

\begin_layout LyX-Code

\family typewriter
cd /Files/WWW/example.com/htdocs/blog
\end_layout

\begin_layout Standard
Next, you'll create a landing page for the blog, which is typically named
 
\family typewriter
blog.fs
\family default
.
 This page serves as a trampoline of sorts, allowing the blog software to
 run without actually requiring the blog software to exist at this location.
 This improves website security, should the web server itself become compromised.
 Pay attention to the space between the 
\family typewriter
#!
\family default
 and the 
\family typewriter
/usr/local/env
\family default
 pathname -- if it's not there, the trampoline will not work, as GForth
 will complain about a missing definition for the 
\family typewriter
#!/usr/bin/env
\family default
 word.
\end_layout

\begin_layout LyX-Code
#! /usr/local/env gforth
\end_layout

\begin_layout LyX-Code
require /opt/local/unsuitable/share/unsuitable2/blog.fs
\end_layout

\begin_layout Standard
The 
\family typewriter
theme
\family default
 directory will need to be installed locally as well, for the blog software
 relies on relative paths.
\end_layout

\begin_layout LyX-Code
cp -r $UNSUITABLE/theme .
\end_layout

\begin_layout Standard
After you complete these installation steps, restart your web server software
 to make sure it picks up the new configurations.
 If you access your configured location (e.g., 
\family typewriter
http://www.example.com/blog
\family default
 or 
\family typewriter
http://www.example.com/blog/blog.fs
\family default
), you should see a diagnostic indicating a complete installation:
\end_layout

\begin_layout LyX-Code
The blog appears to have been installed correctly;
\end_layout

\begin_layout LyX-Code
however, no articles exist in the message database.
\end_layout

\begin_layout Standard
Later, once article submissions to the blog appear, a process explained
 later in this document, you'll see the top-level index page instead of
 the diagnostic.
 
\end_layout

\begin_layout Part
Program Documentation
\end_layout

\begin_layout Chapter
Page Handler Dispatch
\end_layout

\begin_layout Standard
Unsuitable passes control to different modules depending on the nature of
 the resource accessed by the reader.
 The blog.fs module is the single entry point responsible for dispatching
 to different handler modules, depending on the requested resource URL.
\end_layout

\begin_layout Standard
The PATH_INFO environment variable, established by the web server, contains
 the 
\begin_inset Quotes eld
\end_inset

tail
\begin_inset Quotes erd
\end_inset

 of the resource URL.
 For example, if a reader clicks on a URL like http://www.example.com/blog/blog.fs/
article/1234, then the web server sets PATH_INFO to /article/1234 before
 invoking Unsuitable.
 Knowing this, we can establish several tests for the dispatcher to verify
 it works to our satisfaction.
\end_layout

\begin_layout Scrap

<<test-blog.fs>>=
\end_layout

\begin_layout Scrap

warnings off
\end_layout

\begin_layout Scrap

marker done
\end_layout

\begin_layout Scrap

: inc         include ;
\end_layout

\begin_layout Scrap

defer included
\end_layout

\begin_layout Scrap

: include     parse-name included ;
\end_layout

\begin_layout Scrap

\end_layout

\begin_layout Scrap


\backslash
    AS A: reader
\end_layout

\begin_layout Scrap


\backslash
  I WANT: to not always have to explicitly type "index"
\end_layout

\begin_layout Scrap


\backslash
          to see the index page
\end_layout

\begin_layout Scrap


\backslash
 SO THAT: I can read the blog without undue burden.
\end_layout

\begin_layout Scrap


\backslash

\end_layout

\begin_layout Scrap


\backslash
 A zero-length string occurs when the client requests a
\end_layout

\begin_layout Scrap


\backslash
 resource without a trailing slash.
\end_layout

\begin_layout Scrap

\end_layout

\begin_layout Scrap

: path-info   12893 0 ;
\end_layout

\begin_layout Scrap

: i           s" lib/index.fs" compare abort" No PATH_INFO; index page expected"
 ;
\end_layout

\begin_layout Scrap

' i is included
\end_layout

\begin_layout Scrap

inc blog.fs
\end_layout

\begin_layout Scrap

 
\end_layout

\begin_layout Scrap


\backslash
    AS A: reader
\end_layout

\begin_layout Scrap


\backslash
  I WANT: to not always have to explicitly type "index"
\end_layout

\begin_layout Scrap


\backslash
          to see the index page
\end_layout

\begin_layout Scrap


\backslash
 SO THAT: I can read the blog without undue burden.
\end_layout

\begin_layout Scrap


\backslash

\end_layout

\begin_layout Scrap


\backslash
 Some web servers can be configured to automatically
\end_layout

\begin_layout Scrap


\backslash
 redirect requests for some resource R to R/, thus tacking
\end_layout

\begin_layout Scrap


\backslash
 a terminal slash to the URI.
\end_layout

\begin_layout Scrap

\end_layout

\begin_layout Scrap

: path-info   S" /" ;
\end_layout

\begin_layout Scrap

: i           S" lib/index.fs" compare abort" PATH_INFO of /; index page
 expected" ;
\end_layout

\begin_layout Scrap

' i is included
\end_layout

\begin_layout Scrap

inc blog.fs
\end_layout

\begin_layout Scrap

 
\end_layout

\begin_layout Scrap


\backslash
    AS A: blog administrator
\end_layout

\begin_layout Scrap


\backslash
  I WANT: to prohibit site cracking through malformed resource URIs
\end_layout

\begin_layout Scrap


\backslash
 SO THAT: I can have higher confidence in the software.
\end_layout

\begin_layout Scrap


\backslash

\end_layout

\begin_layout Scrap


\backslash
 Article URLs must always have an article ID supplied as a parameter.
\end_layout

\begin_layout Scrap


\backslash
 If no ID appears in the URL, we resort to rendering the index page,
\end_layout

\begin_layout Scrap


\backslash
 just as we did with Unsuitable 1B.
\end_layout

\begin_layout Scrap

\end_layout

\begin_layout Scrap

: path-info   S" /article" ;
\end_layout

\begin_layout Scrap

: i           S" lib/article.fs" compare abort" PATH_INFO with module; module
 expected" ;
\end_layout

\begin_layout Scrap

' i is included
\end_layout

\begin_layout Scrap

inc blog.fs
\end_layout

\begin_layout Scrap

 
\end_layout

\begin_layout Scrap


\backslash
    AS A: blog administrator
\end_layout

\begin_layout Scrap


\backslash
  I WANT: to prohibit site cracking through malformed resource URIs
\end_layout

\begin_layout Scrap


\backslash
 SO THAT: I can have higher confidence in the software.
\end_layout

\begin_layout Scrap


\backslash

\end_layout

\begin_layout Scrap


\backslash
 Another approach towards attempting to compromise the system is to
\end_layout

\begin_layout Scrap


\backslash
 pass one or more parameters in the hopes that it will overflow a
\end_layout

\begin_layout Scrap


\backslash
 buffer.
  We defer validation of module parameters to the relevant
\end_layout

\begin_layout Scrap


\backslash
 modules.
\end_layout

\begin_layout Scrap

\end_layout

\begin_layout Scrap

: path-info   S" /article/1234" ;
\end_layout

\begin_layout Scrap

: i           S" lib/article.fs" compare abort" PATH_INFO with args; module
 expected" ;
\end_layout

\begin_layout Scrap

' i is included
\end_layout

\begin_layout Scrap

inc blog.fs
\end_layout

\begin_layout Scrap

 
\end_layout

\begin_layout Scrap

done bye
\end_layout

\begin_layout Scrap

@
\end_layout

\begin_layout Scrap

\end_layout

\begin_layout Scrap

<<blog.fs>>=
\end_layout

\begin_layout Scrap

#! /usr/bin/env gforth
\end_layout

\begin_layout Scrap

variable a
\end_layout

\begin_layout Scrap

variable b
\end_layout

\begin_layout Scrap

variable l
\end_layout

\begin_layout Scrap

: -eos               b @ a @ l @ + u< if exit then  a @ l @ r> drop ;
\end_layout

\begin_layout Scrap

: -/                 b @ c@ [char] / xor if exit then  a @ b @ over - r>
 drop ;
\end_layout

\begin_layout Scrap

: scan               begin -eos -/ 1 b +! again ;
\end_layout

\begin_layout Scrap

: parsed             path-info 1- l ! 1+ dup a ! b ! scan ;
\end_layout

\begin_layout Scrap

: default            s" lib/index.fs" ;
\end_layout

\begin_layout Scrap

: path-info-length   path-info nip ;
\end_layout

\begin_layout Scrap

: place              here swap dup allot move ;
\end_layout

\begin_layout Scrap

: module 			here s" lib/" place parsed place S" .fs" place here over - ;
\end_layout

\begin_layout Scrap

: filename           path-info-length 1 u> if module else default then ;
\end_layout

\begin_layout Scrap

: dispatch           filename included ;
\end_layout

\begin_layout Scrap

dispatch
\end_layout

\begin_layout Scrap

@
\end_layout

\begin_layout Chapter
Index Page Generation
\end_layout

\begin_layout Standard
When the user accesses the blog's base URL, the blog responds with the index
 page.
 This page lets the user see the most recently posted articles.
\end_layout

\begin_layout Standard
All HTTP responses from Unsuitable includes a HTML MIME-type.
\end_layout

\begin_layout Scrap

<<HTML MIME type>>=
\end_layout

\begin_layout Scrap

: mime       ." Content-Type: text/html" cr cr ;
\end_layout

\begin_layout Scrap

@ %def mime
\end_layout

\begin_layout Standard
In the interests of providing a consistent user interface on the various
 pages generated by Unsuitable, we need a method of re-using the beginning
 and trailing part of a web page while still retaining the freedom to change
 the middle content.
 Breaking a page into three parts, a consistent header and footer, and a
 task-oriented content part, solves this problem.
\end_layout

\begin_layout Scrap

<<Index Page Dependencies>>=
\end_layout

\begin_layout Scrap

require lib/templates.fs
\end_layout

\begin_layout Scrap

@
\end_layout

\begin_layout Scrap

<<Index header and footer>>=
\end_layout

\begin_layout Scrap

: footer     S" theme/index-footer" contents ;
\end_layout

\begin_layout Scrap

: header     S" theme/index-header" contents ;
\end_layout

\begin_layout Scrap

@ %def header footer
\end_layout

\begin_layout Standard
If the articles database is empty, clearly we cannot generate any meaningful
 index.
 In this case, we want to deliver instead a diagnostic message letting the
 blog administrator know that everything is OK despite the lack of articles.
\end_layout

\begin_layout Scrap

<<Index Page Settings>>=
\end_layout

\begin_layout Scrap

: diagnostic
\end_layout

\begin_layout Scrap

  ." <p>The blog appears to have been installed correctly; "
\end_layout

\begin_layout Scrap

  ." however, no articles exist in the message database.</p>" ;
\end_layout

\begin_layout Scrap

@ %def diagnostic
\end_layout

\begin_layout Standard
Otherwise, if at least one article exists in the database, then we want
 to make sure we show only the last 
\begin_inset Formula $n$
\end_inset

 articles posted, where 
\begin_inset Formula $1\leq n<maxArticlesOnIndexPage$
\end_inset

.
\end_layout

\begin_layout Scrap

<<Index Page Settings>>=
\end_layout

\begin_layout Scrap

: max-articles-on-index-page
\end_layout

\begin_layout Scrap

  5 ;
\end_layout

\begin_layout Scrap

@ %def max-articles-on-index-page
\end_layout

\begin_layout Scrap

<<Index Page Dependencies>>=
\end_layout

\begin_layout Scrap

require lib/config.fs
\end_layout

\begin_layout Scrap

require lib/article.fs
\end_layout

\begin_layout Scrap

require lib/articles-db.fs
\end_layout

\begin_layout Scrap

require lib/views.fs
\end_layout

\begin_layout Scrap

@
\end_layout

\begin_layout Scrap

<<Index page content>>=
\end_layout

\begin_layout Scrap

: items      begin dup while indexItem 1- repeat drop ;
\end_layout

\begin_layout Scrap

: n          #articles max-articles-on-index-page min ;
\end_layout

\begin_layout Scrap

: -empty     empty? if diagnostic r> drop then ;
\end_layout

\begin_layout Scrap

: content    -empty n items ;
\end_layout

\begin_layout Scrap

@ %def content
\end_layout

\begin_layout Standard
The handler puts everything together into an HTTP response for the web browser,
 then simply exits.
\end_layout

\begin_layout Scrap

<<lib/index.fs>>=
\end_layout

\begin_layout Scrap

<<Index Page Dependencies>>
\end_layout

\begin_layout Scrap

<<Index page content>>
\end_layout

\begin_layout Scrap

<<Index header and footer>>
\end_layout

\begin_layout Scrap

<<HTML MIME type>>
\end_layout

\begin_layout Scrap

: indexPage  mime header content footer ;
\end_layout

\begin_layout Scrap

indexPage bye
\end_layout

\begin_layout Scrap

@
\end_layout

\begin_layout Chapter

Configuration
\end_layout

\begin_layout Standard

Unsuitable cannot operate without some amount of configuration.
 An administrator should adjust the following configuration file to suit
 his or her needs prior to the site becoming publicly visible.
\end_layout

\begin_layout Scrap

<<lib/config.fs>>=
\end_layout

\begin_layout Scrap

<<Index Page Settings>>
\end_layout

\begin_layout Scrap

<<View Settings>>
\end_layout

\begin_layout Scrap

<<Publication Import Settings>>
\end_layout

\begin_layout Scrap

@
\end_layout

\begin_layout Scrap

\end_layout

\begin_layout Chapter

The Many Faces of an Article
\end_layout

\begin_layout Standard
Unsuitable presently defines three different views of an 
\begin_inset Quotes eld
\end_inset

article.
\begin_inset Quotes erd
\end_inset

 Each of these views serve a specific purpose, including:
\end_layout

\begin_layout Itemize
Index view -- a brief summary of an article, showing who wrote it, when,
 the title of the article, and its abstract.
 The reader is expected to click the title of the article if (s)he wishes
 to read more.
\end_layout

\begin_layout Itemize
Article view -- the complete layout of the article, including the body.
\end_layout

\begin_layout Itemize
RSS Item view -- similar to the index view in many ways, but formatted for
 consumption by an RSS reader.
\end_layout

\begin_layout Standard
Each view's implementation follows, and appears in the 
\family typewriter
lib/views.fs
\family default
 file.
\end_layout

\begin_layout Scrap

<<lib/views.fs>>=
\end_layout

\begin_layout Scrap

<<Index View>>
\end_layout

\begin_layout Scrap

<<Article View>>
\end_layout

\begin_layout Scrap

<<RSS Item View>>
\end_layout

\begin_layout Scrap

@
\end_layout

\begin_layout Section
Index View
\end_layout

\begin_layout Standard
Spaces should never appear inside an URL.
 Unsuitable synthesizes URLs to articles, referenced by a numeric identifier,
 as a normal function of rendering links to its articles.
 Since Forth's built-in operator to print an integer appends a space, we
 cannot use it to construct a URL.
 We need a word which prints an integer without the trailing space instead.
\end_layout

\begin_layout Scrap

<<Index View>>=
\end_layout

\begin_layout Scrap

: .-s         s>d <# #s #> type ;
\end_layout

\begin_layout Scrap

@ %def .-s
\end_layout

\begin_layout Standard

Articles can be read by visiting resource at 
\family typewriter
http://
\family default
\shape italic
blog-address
\family typewriter
\shape default
/article/
\family default
\shape italic
id
\shape default
.
\end_layout

\begin_layout Scrap

<<View Settings>>=
\end_layout

\begin_layout Scrap

: base-blog-http
\end_layout

\begin_layout Scrap

  ." http://www.falvotech.com/blog3/blog.fs" ;
\end_layout

\begin_layout Scrap

@ %def base-blog-http
\end_layout

\begin_layout Scrap

<<Index View>>=
\end_layout

\begin_layout Scrap

: url         base-blog-http ." /article/" id .-s ;
\end_layout

\begin_layout Scrap

@ %def url
\end_layout

\begin_layout Standard
We need to wrap the article's title inside an anchor tag, so that the reader
 can click on the title to read the full article content.
 Note that standard Forth will not permit us to embed a quotation mark inside
 the string, so we define a convenient word 
\family typewriter
q
\family default
 which emits such a character.
 
\end_layout

\begin_layout Scrap

<<Index View>>=
\end_layout

\begin_layout Scrap

: q           34 emit ;
\end_layout

\begin_layout Scrap

: a(          ." <a href=" q url q ." >" ;
\end_layout

\begin_layout Scrap

: a)          ." </a>" ;
\end_layout

\begin_layout Scrap

@ %def a( a)
\end_layout

\begin_layout Standard
Individual attributes of the article receive their own HTML rendering.
\end_layout

\begin_layout Scrap

<<Index View>>=
\end_layout

\begin_layout Scrap

: .title      a( title type a) ;
\end_layout

\begin_layout Scrap

: .posted     ." 2011 Apr 14 12:35 PDT" ;
\end_layout

\begin_layout Scrap

: .author     author type ;
\end_layout

\begin_layout Scrap

: .abstract   abstract type ;
\end_layout

\begin_layout Scrap

: .continued  hasBody? if ." (continued...)" then ;
\end_layout

\begin_layout Scrap

@ %def .title .posted .author .abstract .continued
\end_layout

\begin_layout Standard

An index item consists of all these things bundled into a single HTML fragment.
\end_layout

\begin_layout Scrap

<<Index View>>=
\end_layout

\begin_layout Scrap

: indexItem   .title .posted .author .abstract .continued ;
\end_layout

\begin_layout Scrap

@ %def indexItem
\end_layout

\begin_layout Section
Article View
\end_layout

\begin_layout Scrap

<<Article View>>=
\end_layout

\begin_layout Scrap

@
\end_layout

\begin_layout Section
RSS Item View
\end_layout

\begin_layout Scrap

<<RSS Item View>>=
\end_layout

\begin_layout Scrap

@
\end_layout

\begin_layout Chapter

Importing File Contents
\end_layout

\begin_layout Standard
Unsuitable 2 presently takes its publication data in the form of files,
 located in well-known locations.
 These locations are determined by settings in the lib/config.fs file.
\end_layout

\begin_layout Scrap

<<Publication Import Settings>>
\lang english
=
\end_layout

\begin_layout Scrap

: article-body-file
\end_layout

\begin_layout Scrap

  s" /tmp/body" ;
\end_layout

\begin_layout Scrap

: article-abstract-file
\end_layout

\begin_layout Scrap

  s" /tmp/abstract" ;
\end_layout

\begin_layout Scrap

@ %def article-body-file article-abstract-file
\end_layout

\begin_layout Scrap
Given a filename to work with, we'll need a means of loading the contents
 of the file so that we can manipulate or store the contents in the article
 database.
\end_layout

\begin_layout Scrap
<<lib/import.fs>>=
\end_layout

\begin_layout Scrap
variable h
\end_layout

\begin_layout Scrap
: open     r/o bin open-file throw h ! ;
\end_layout

\begin_layout Scrap
: close    h @ close-file throw ;
\end_layout

\begin_layout Scrap
: part     here 1024 h @ read-file throw dup allot ;
\end_layout

\begin_layout Scrap
: input    begin part 0= until ;
\end_layout

\begin_layout Scrap
: ingest   here input here over - ;
\end_layout

\begin_layout Scrap
: import   open ['] ingest catch close throw ;
\end_layout

\begin_layout Scrap
@ %def import
\end_layout

\end_body
\end_document
