- Purpose:
  - Provide general purpose, persistent storage for arbitrary
    quantities of bytes.

- Assumptions:
  - mappings.fs already compiled
  - lens = addrs + /hfields

- Basic Architecture:

  - Handle table
    - Maps persistent handle to (block address, length) pair.
      - handle = byte offset into handle arrays
    - Consists of /hfields bytes worth of block storage per column
    - two columns of data
      - addrs = block-vector of object block addresses
      - lens = block-vector of object lengths
    - Accessors
      - addr/addr! get/set the current object's block address
      - (addr = -1) => handle is free for use; else, gorg <= addr < gend
      - length/length! get/set the current object's length
      - length undefined if (addr = -1)
      - gob/gob! (General OBject) gets/sets current object handle
      - put assigns a new handle and stores the core-resident object.
      - get, copies current object to HERE and allots enough to protect object.

  - Octet Store
    - gorg and gend are byte pointers into block address space.
        - Thus, storage starts on gorg 1024 / block.
        - And, ends on gend 1024 / block.
    - Unless otherwise specified, offsets are byte-offsets
      relative to gorg.
    - For maximum space efficiency, all objects stored on
      byte boundaries, not block boundaries.
      - Numerous blog entries and comments fall substantially
        short of 1024 bytes; thus, this reduces internal
        fragmentation to zero.
    - Allocation works through offset-bumping.
      - Current offset found in block 1
    - Needs garbage collection!

- Comments:
  - fence = byte address in block-space of next free byte
  - (Persistent) VARIABLE fencepost = offset in bytes from gorg
  - archive places data into the general store.  Assumes caller
    knows data's location already.
    - part ( a u -- b v ) writes a (sub-)block of data to
      storage
      - Let n = the number of bytes left in the current block
        referred to by fence (calculated by partial)
      - Preconditions:
        - a points at start of string in core
        - u = length of the string in core
        - (gorg <= fence <= gend) /\ (gorg <= fence+n <= gend)
      - Postconditions:
        - a <= b = a+n <= address of byte past end of string
        - 0 <= v = u-n <= u
        - (gorg <= fence <= gend) /\ (fence = old_fence + n)
        - data copied to block storage
        - block marked for update
  - retrieve, recovers data from the store, placing it HERE, and
    alloting as appropriate.
    - part ( a u -- b v ) reads a (sub-)block of data from storage
    - Let n = the number of bytes left in the current block
      referred to by a (calculated by remaining)
      - Preconditions:
        - a points at desired GOB; it's a block address!
        - u = length of desired gob
        - (gorg <= a <= gend) /\ (gorg <= a+u <= gend)
      - Postconditions:
        - a <= b = a+u <= address of next GOB.
        - 0 <= v = u-n <= u
        - fence = old fence
        - data copied to HERE

